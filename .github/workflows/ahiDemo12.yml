name: ðŸ”†Dynamic Matrix Target Demo

on:
  workflow_dispatch:
    inputs:
      runner:
        description: "Select the Runner"
        required: true
        default: "windows-latest"
        type: choice
        options:
          - windows-latest
          - Dev-runner
          - qa-runner
          - mock-runner
          - prod-runner
      environment:
        description: "Select the Target"
        required: true
        default: "Environment"
        type: choice
        options:
          - dev
          - qa
          - mock
          - prod
      tagName:
        description: "Select the Job"
        required: true
        type: choice
        options:
          - RCM-AHI.APP.LEGACY
          - RCM-AHI.APP.PHASE2
 
env:
  ENV_NAME: ${{github.event.inputs.environment}}
  targetmachine: ""
  Runner: ${{ github.event.inputs.environment =='dev' && 'ahiqa-dev' || (github.event.inputs.environment  =='qa' && 'windows-latest' || ( github.event.inputs.environment=='mock' && 'ubuntu-latest' || 'windows-latest'))}}
jobs:
#  Wait-for-Approval:
#    runs-on: ${{ github.event.inputs.environment =='dev' && 'ahiqa-dev' || (github.event.inputs.environment  =='qa' && 'windows-latest' || ( github.event.inputs.environment=='mock' && 'ubuntu-latest' || 'windows-latest'))}}
#    environment:
#      name: approval-check
#    steps:
#    - name: Approval step
#      run: echo "This is the approval-check environment"
  Initialize:
    runs-on: ${{ github.event.inputs.environment =='dev' && 'ahiqa-dev' || (github.event.inputs.environment  =='qa' && 'windows-latest' || ( github.event.inputs.environment=='mock' && 'ubuntu-latest' || 'windows-latest'))}}
   # needs: Wait-for-Approval
    environment: 
      name: ${{ github.event.inputs.environment}}
    outputs:
      Target: ${{ steps.set-matrix.outputs.targetMachines }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Generate Target Machines
        id: set-matrix
        shell: pwsh
        run: |
           powershell.exe ${{ github.workspace }}\scripts\InitializeEnvironments.ps1 `
           -targetTag ${{ github.event.inputs.environment }} `
           -environment ${{ github.event.inputs.environment }} `
           -region "us-east-1"

          
  deploy:
    runs-on: ${{ inputs.runner }}
    needs: Initialize
    strategy:
      matrix:
        target: ${{ fromJson(needs.Initialize.outputs.Target) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Debug Matrix Value
        run: |
          echo "Deploying to target:${{ matrix.target }}"
          $scriptBlockString = @'
              $host=hostname
              echo "running on $host"
              ls
          '@
          .\scripts\Invoke-MyCommand.ps1 -Computername ${{ matrix.target }} -ScriptBlock "$scriptBlockString"
        shell: powershell

 
      - name: Wait for Approval
        run: echo "Waiting for approval..."
 
      - name: Deploy Service
        run: |
          echo "${{vars.test}}"
          echo "Deploying to ${{ matrix.target }}"
          # Add your deployment logic here

  deploy2:
    runs-on: ${{ inputs.runner }}
    needs: [deploy]
    
    steps:
    #  - name: Debug Matrix Value
    #    run: echo "Deploying to target: ${{ matrix.target }}"
 
      - name: script-output
        run: |
            echo ${{matrix.target}}
 
      - name: Deploy Service
        run: |
          echo "${{env.test}}"
          echo "Deploying to ${{ matrix.target }}"
          echo "Output from script: ${{ steps.script-output.outputs.my_output }}"
          # Add your deployment logic here
