name: CodeCoverage.Net.4.0
inputs:
  filePath:
    description: "file path for variable substitution"
    required: false
    type: string
  type:
    description: "file type for variable substitution XML/JSON"
    required: true
    type: string
  environment:
    description: "environment for variable substitution"
    required: true
    type: string
  access_token:
    description: "access token for variable substitution"
    required: true
    type: string
  secrets_path:
    description: "secrets path for variable substitution"
    required: true
    type: string
  region:
    description: "region for secrets"
    required: true
    type: string
runs:
  using: "composite"
  steps:

  - name: fetching-Variable and Replace values
    id: testing
    run: |
      # Define variables
      $token = "${{inputs.access_token}}"
      # $token = "${{inputs.access_token}}"
      $owner = "${{github.repository_owner}}"
      $repo = "${{github.repository}}"
      $environment = "${{inputs.environment}}"

      # Set the GitHub API URL
      $url = "https://api.github.com/repos/$repo/environments/$environment/variables"
      Write-Host "Fecthing Environment variable from $url"
      # Make the API request
      $response = Invoke-RestMethod -Uri $url -Headers @{ Authorization = "token $token" } -Method Get

      # Convert the response to JSON
      $environmentVariable = $response | ConvertTo-Json -Depth 10 -Compress

      # Output the JSON response
      # Set the GitHub API URL
      $url = "https://api.github.com/repos/$repo/actions/variables"
      Write-Host "Fecthing Environment Repository Variables from $url"

      # Make the API request
      $response = Invoke-RestMethod -Uri $url -Headers @{ Authorization = "token $token" } -Method Get

      # Convert the response to JSON
      $repositoryVariable = $response | ConvertTo-Json -Depth 10 -Compress
   
      $envVariable= $environmentVariable | ConvertFrom-Json
      $Variable= $repositoryVariable | ConvertFrom-Json
      $configUrl="${{inputs.filePath}}" 

      # Get Secrets from AWS
      # $response = aws secretsmanager get-secret-value --secret-id ${{ inputs.secrets_path }} --region ${{ inputs.region }} | ConvertFrom-Json
      # $awsSecrets = $response.SecretString | ConvertFrom-Json
      $awsSecrets = Get-Content ${{ github.workspace }}\scripts\awsSecret.json -Raw | ConvertFrom-Json
      if("${{inputs.type}}" -eq "XML")
      {
        # Perform variable substitution
        [xml]$xmlConfig = Get-Content $configUrl
        write-host "looping through xml for all variables"
        foreach ($setting in $xmlConfig.configuration.appSettings.add) {
          if ($setting.value -like "#{*}") {
            # Check in Aws Sceret
            $variableName = $setting.value.Replace("#{","").Replace("}","")
            write-host "Preparing for $variableName value replacement"
            $value= $awsSecrets.$variableName 
            
            if($value -ne $null)
            {
              write-host "== Variable  found in Secret replacing value for $variableName"
              $setting.value=$value
            }else {
              # if not in AWS Check in Environment Variable
              write-host "== Variable  not found in Secret checking in Environment Variable for $variableName"
              $value= $envVariable.variables | Where-Object {$_.name -eq $variableName }
              
              if($value -ne $null)
              {
                write-host "== Variable  found in Environment Variable replacing value for $variableName"
                $setting.value=$value.value
              }
              else
              {
                # If not in Environment then Check in Repository
                write-host "== Variable  not found in Environment Variable checking in Repository Variable for $variableName"
                $value= $Variable.variables | Where-Object {$_.name -eq $variableName }
                if($value -ne $null)
                {
                  write-host "== Variable  found in Repository Variable replacing value for $variableName"
                  $setting.value=$value.value
                }
                else
                {
                  write-host "== Variable  not found for $variableName"
                }
              }
            }
          }
        }
        write-host "looping through xml for all serviceModel"
        foreach ($setting in $xmlConfig.configuration.'system.serviceModel'.bindings.basicHttpBinding.binding.security) {
            if ($setting.mode -like "#{*}") {
              $variableName = $setting.mode.Replace("#{","").Replace("}","")
              write-host "Preparing for $variableName value replacement"
              $value= $awsSecrets.$variableName
              if($value -ne $null)
              {
                write-host "== Variable  found in Secret replacing value for $variableName"
                $setting.mode=$value
              }
              else
              {
                write-host "== Variable  not found in Secret checking in Environment Variable for $variableName"
                $value= $envVariable.variables | Where-Object {$_.name -eq $variableName }
                if($value -ne $null)
                {
                  write-host "== Variable  found in Environment Variable replacing value for $variableName"
                  $setting.mode=$value.value
                }
                else
                {
                  write-host "== Variable  not found in Environment Variable checking in Repository Variable for $variableName"
                  $value= $Variable.variables | Where-Object {$_.name -eq $variableName }
                  if($value -ne $null)
                  {
                    write-host "== Variable  found in RepositoryEnvironment Variable replacing value for $variableName"
                    $setting.mode=$value.value
                  }
                  else
                  {
                    write-host "== Variable  not found for $variableName"
                  }
                }
              }
          }
     
            if ($setting.connectionString -like "#{*}") {
              $variableName = $setting.connectionString.Replace("#{","").Replace("}","")
              write-host "Preparing for $variableName value replacement"
              $value= $awsSecrets.$variableName
              if($value -ne $null)
              {
                write-host "== Variable  found in Secret replacing value for $variableName"
                $setting.connectionString=$value
              }
              else
              {
                write-host "== Variable  not found in Secret checking in Environment Variable for $variableName"
                $value= $envVariable.variables | Where-Object {$_.name -eq $variableName }
                if($value -ne $null)
                {
                  write-host "== Variable  found in Environment Variable replacing value for $variableName"
                  $setting.connectionString=$value.value
                }
                else
                {
                  write-host "== Variable  not found in Environment Variable checking in Repository Variable for $variableName"
                  $value= $Variable.variables | Where-Object {$_.name -eq $variableName }
                  if($value -ne $null)
                  {
                    write-host "== Variable  found in RepositoryEnvironment Variable replacing value for $variableName"
                    $setting.connectionString=$value.value
                  }
                  else
                  {
                    write-host "== Variable  not found for $variableName"
                  }
                }
              }
          }
      
      }
        # Save the modified XML configuration file
        $xmlConfig.Save($configUrl)
        write-host "XML File saved to location $configUrl"
      }
      elseif("${{inputs.type}}" -eq "JSON")
      {
        write-host "Getting fileContent $configUrl"
        $jsonContent = Get-Content $configUrl -Raw | ConvertFrom-Json
              
        $jsonContent.PSObject.Properties | ForEach-Object {
        
        $variableName = $_.Name
        if($jsonContent.$variableName -like '#{*}')
        {
        write-host "Preparing for $variableName value replacement"

        $value= $awsSecrets.$variableName
          if($value -ne $null)
          {
            write-host "== Variable  found in Secret replacing value for $variableName"
            $jsonContent.$variableName=$value
          }
          else{
            write-host "== Variable  not found in Secret checking in Environment Variable for $variableName"
            $value= $envVariable.variables | Where-Object {$_.name -eq $variableName }
            if($value -ne $null)
            {
              write-host "== Variable  found in Environment Variable replacing value for $variableName"
              $jsonContent.$variableName=$value.value
            }
            else
            {
              write-host "== Variable  not found in Environment Variable checking in Repository Variable for $variableName"
              $value= $Variable.variables | Where-Object {$_.name -eq $variableName }
              if($value -ne $null)
              {
                write-host "== Variable  found in Repository Variable replacing value for $variableName"
                $jsonContent.$variableName=$value.value
              }
              else
               {
                    write-host "== Variable  not found for $variableName"
                }
             }
           }
          }
         }
          $jsonContent | ConvertTo-Json -Depth 100 | Set-Content $configUrl
          write-host "Json File saved to location $configUrl"
       }
       else
       {
        write-host "${{inputs.type}} Not Supported. Please send XML or JSON."
       }
    shell: powershell
